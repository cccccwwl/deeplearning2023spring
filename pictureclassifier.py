# -*- coding: utf-8 -*-
"""PictureClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hkNAgpztZV13uUNAjJXRcHemjpeRnb4A
"""


import os 
import math
import shutil

dataset_path = "./256_ObjectCategories/"

data_path = "./data/"

if not os.path.exists(os.path.join(data_path,"train")):
  os.makedirs(os.path.join(data_path,"train"))
if not os.path.exists(os.path.join(data_path,"valid")):
  os.makedirs(os.path.join(data_path,"valid"))
if not os.path.exists(os.path.join(data_path,"test")):
  os.makedirs(os.path.join(data_path,"test"))


def mycopyfile(srcfile,dstpath):                       # 复制函数
    if not os.path.isfile(srcfile):
      print ("%s not exist!"%(srcfile))
    else:
      fpath,fname=os.path.split(srcfile)             # 分离文件名和路径
      if not os.path.exists(dstpath):
          os.makedirs(dstpath)                       # 创建路径
      shutil.copy(srcfile, os.path.join(dstpath,fname))             # 复制文件
      print ("copy %s -> %s"%(srcfile, os.path.join(dstpath,fname)))

train_split=0.7
vaild_split=0.15
test_split=0.15
# read dataset 
object_set=set()
if os.path.exists(dataset_path):
  for item in os.listdir(dataset_path):
    print(item)
    object_name = item.split(".")[-1]
    object_set.add(object_name)
    count = 1
    pictures = os.listdir(os.path.join(dataset_path,item))
    length = len(pictures)
    print(length)
    train_pic = math.ceil(train_split*length)
    vaild_pic = math.ceil(vaild_split*length)
    test_pic = length - train_pic - vaild_pic
    for picture in pictures:
      if count<=train_pic:
        mycopyfile(os.path.join(dataset_path,item,picture),os.path.join(data_path,"train",object_name))
      elif count>train_pic and count<=(train_pic+vaild_pic):
        mycopyfile(os.path.join(dataset_path,item,picture),os.path.join(data_path,"valid",object_name))
      elif count>(train_pic+vaild_pic) and count<=length:
        mycopyfile(os.path.join(dataset_path,item,picture),os.path.join(data_path,"test",object_name))
      count = count + 1
  print(object_set)

import torch, torchvision
from torchvision import datasets, models, transforms
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
import time
from torchsummary import summary
import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image
 
# Applying Transforms to the Data
image_transforms = { 
    'train': transforms.Compose([
        transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),
        transforms.RandomRotation(degrees=15),
        transforms.RandomHorizontalFlip(),
        transforms.CenterCrop(size=224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'valid': transforms.Compose([
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'test': transforms.Compose([
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ])
}

# Load the Data
 
# Set train and valid directory paths
 
dataset = './data/'
 
train_directory = os.path.join(dataset, 'train')
valid_directory = os.path.join(dataset, 'valid')
test_directory = os.path.join(dataset, 'test')
print(train_directory)
 
# Batch size
bs = 32
 
# Number of classes
num_classes = len(os.listdir(valid_directory))  #10
# num_classes = 257
print("num_classes",num_classes)

datasets.ImageFolder(train_directory)
 
# Load Data from folders
data = {
    'train': datasets.ImageFolder(root=train_directory, transform=image_transforms['train']),
    'valid': datasets.ImageFolder(root=valid_directory, transform=image_transforms['valid']),
    'test': datasets.ImageFolder(root=test_directory, transform=image_transforms['test'])
}
 
# Get a mapping of the indices to the class names, in order to see the output classes of the test images.
idx_to_class = {v: k for k, v in data['train'].class_to_idx.items()}
print(idx_to_class)
 
# Size of Data, to be used for calculating Average Loss and Accuracy
train_data_size = len(data['train'])
valid_data_size = len(data['valid'])
test_data_size = len(data['test'])
 
# Create iterators for the Data loaded using DataLoader module
train_data_loader = DataLoader(data['train'], batch_size=bs, shuffle=True)
valid_data_loader = DataLoader(data['valid'], batch_size=bs, shuffle=True)
test_data_loader = DataLoader(data['test'], batch_size=bs, shuffle=True)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)
# Load pretrained ResNet50 Model
model = models.resnet50(pretrained=True)

# 网络模型cuda
# model = model.to(device)

print(next(model.parameters()).device)

# Freeze model parameters
for param in model.parameters():
  param.requires_grad = False

# Change the final layer of ResNet50 Model for Transfer Learning
fc_inputs = model.fc.in_features
 
model.fc = nn.Sequential(
    nn.Linear(fc_inputs, 256),
    nn.ReLU(),
    nn.Dropout(0.4),
    nn.Linear(256, 257), 
    nn.LogSoftmax(dim=1)) # For using NLLLoss()
# Convert model to be used on GPU
# resnet50 = resnet50.to('cuda')

# Define Optimizer and Loss Function
loss_func = nn.NLLLoss()
optimizer = optim.Adam(model.parameters())

model = model.to(device)

from tqdm import tqdm
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)
def train_and_validate(model, loss_criterion, optimizer, epochs=25):
    '''
    Function to train and validate
    Parameters
        :param model: Model to train and validate
        :param loss_criterion: Loss Criterion to minimize
        :param optimizer: Optimizer for computing gradients
        :param epochs: Number of epochs (default=25)
  
    Returns
        model: Trained Model with best validation accuracy
        history: (dict object): Having training loss, accuracy and validation loss, accuracy
    '''
    
    start = time.time()
    history = []
    best_acc = 0.0
 
    for epoch in range(epochs):
        epoch_start = time.time()
        print("Epoch: {}/{}".format(epoch+1, epochs))
        
        # Set to training mode
        model.train()
        
        # Loss and Accuracy within the epoch
        train_loss = 0.0
        train_acc = 0.0
        
        valid_loss = 0.0
        valid_acc = 0.0
        
        for i, (inputs, labels) in enumerate(tqdm(train_data_loader)):
          inputs = inputs.to(device)
          labels = labels.to(device)
          
          # Clean existing gradients
          optimizer.zero_grad()
          
          # Forward pass - compute outputs on input data using the model
          outputs = model(inputs)
          
          # Compute loss
          loss = loss_criterion(outputs, labels)
          
          # Backpropagate the gradients
          loss.backward()
          
          # Update the parameters
          optimizer.step()
          
          # Compute the total loss for the batch and add it to train_loss
          train_loss += loss.item() * inputs.size(0)
          
          # Compute the accuracy
          ret, predictions = torch.max(outputs.data, 1)
          correct_counts = predictions.eq(labels.data.view_as(predictions))
          
          # Convert correct_counts to float and then compute the mean
          acc = torch.mean(correct_counts.type(torch.FloatTensor))
          
          # Compute total accuracy in the whole batch and add to train_acc
          train_acc += acc.item() * inputs.size(0)
          
          #print("Batch number: {:03d}, Training: Loss: {:.4f}, Accuracy: {:.4f}".format(i, loss.item(), acc.item()))

            
        # Validation - No gradient tracking needed
        with torch.no_grad():
 
            # Set to evaluation mode
            model.eval()
 
            # Validation loop
            for j, (inputs, labels) in enumerate(valid_data_loader):
                inputs = inputs.to(device)
                labels = labels.to(device)
 
                # Forward pass - compute outputs on input data using the model
                outputs = model(inputs)
 
                # Compute loss
                loss = loss_criterion(outputs, labels)
 
                # Compute the total loss for the batch and add it to valid_loss
                valid_loss += loss.item() * inputs.size(0)
 
                # Calculate validation accuracy
                ret, predictions = torch.max(outputs.data, 1)
                correct_counts = predictions.eq(labels.data.view_as(predictions))
 
                # Convert correct_counts to float and then compute the mean
                acc = torch.mean(correct_counts.type(torch.FloatTensor))
 
                # Compute total accuracy in the whole batch and add to valid_acc
                valid_acc += acc.item() * inputs.size(0)
 
                #print("Validation Batch number: {:03d}, Validation: Loss: {:.4f}, Accuracy: {:.4f}".format(j, loss.item(), acc.item()))
            
        # Find average training loss and training accuracy
        avg_train_loss = train_loss/train_data_size 
        avg_train_acc = train_acc/train_data_size
 
        # Find average training loss and training accuracy
        avg_valid_loss = valid_loss/valid_data_size 
        avg_valid_acc = valid_acc/valid_data_size
 
        history.append([avg_train_loss, avg_valid_loss, avg_train_acc, avg_valid_acc])
                
        epoch_end = time.time()
    
        print("Epoch : {:03d}, Training: Loss: {:.4f}, Accuracy: {:.4f}%, \n\t\tValidation : Loss : {:.4f}, Accuracy: {:.4f}%, Time: {:.4f}s".format(epoch, avg_train_loss, avg_train_acc*100, avg_valid_loss, avg_valid_acc*100, epoch_end-epoch_start))
        
        # Save if the model has best accuracy till now
        torch.save(model, dataset+'_model_'+str(epoch)+'.pt')
            
    return model, history
# Print the model to be trained
# summary(resnet50, input_size=(3, 224, 224), batch_size=bs, device='cuda')
 
# Train the model for 30 epochs
num_epochs = 30
trained_model, history = train_and_validate(model, loss_func, optimizer, num_epochs)

print(" ======================= The model weights is saved in folder {}! =====================".format("./data"))
 
torch.save(history, dataset+'_history.pt')